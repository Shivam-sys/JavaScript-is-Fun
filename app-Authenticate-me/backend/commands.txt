yarn add the following packages as dependencies:
    bcryptjs - password hashing
    cookie-parser - parsing cookies from requests
    cors - CORS
    csurf - CSRF protection
    dotenv - load environment variables into Node.js from a .env file
    express - Express
    express-async-handler - handling async route handlers
    express-validator - validation of request bodies
    helmet - security middleware
    jsonwebtoken - JWT
    morgan - logging information about server requests/responses
    per-env - use environment variables for starting app differently
    pg@">=8.4.1" - PostgresQL greater or equal to version 8.4.1
    sequelize@5 - Sequelize
    sequelize-cli@5 - use sequelize in the command line

yarn add --dev the following packages as dev-dependencies:
    dotenv-cli - use dotenv in the command line
    nodemon - hot reload server backend files

2. Create .env file from .env.example
3. Create config/index.js 

## sequelize setup

1. Create .sequelizerc 
2. Initialize Sequelize to the db folder by running:
    - npx sequelize init -> this will create config/database.js, models, migrations, and seeders.
3. Replace the content of config/database.js with currrent content.
4. create a user using the same credentials in the .env file.
    - psql -c "CREATE USER <username> PASSWORD '<password>' CREATEDB"
    
## Express setup

1. Create app.js, routes/index.js, bin/www and add scripts to package.json
2. Run npm start

## More routes and error handling
1. Create api/index.js folder inside routes.
2. Also write error handling middlewares in the end of app.js.

## Users table migrations
1. generate a migration and model. Inside backend folder, run:
 - npx sequelize model:generate --name User --attributes username:string,email:string,hashedPassword:string
 - this will create a User model with given attributes
2. Run npx dotenv sequelize db:migrate
3. Incase of error, undo the migration first, change the file, then migrate again
 - npx dotenv sequelize db:migrate:undo / 

## User model validation
1. add Sequelize model-level constraints in models/user.js.

## User Seeds
1. Generate a user seeder file for the demo user with the following command:
  - npx sequelize seed:generate --name demo-user
* In any case of error, run these commands again *
    - npx dotenv sequelize db:migrate:undo
    - npx dotenv sequelize db:migrate
    - npx dotenv sequelize db:seed:undo / npx dotenv sequelize db:seed:undo:all
    - npx dotenv sequelize db:seed

======== Commands worth remembering =========
dropdb dbname : to delete db 
psql -l : to see all database
psql <db_name> : to use database
psql <db_name> -c "\dt" : to see tables in the database
psql <database name> -c 'SELECT * FROM "tablename"' : to SELECT all from table.


psql -c "CREATE USER <username> PASSWORD '<password>' CREATEDB" - create user with same credentials in .env file
npx dotenv sequelize db:create 
======= or taking a peek at ================